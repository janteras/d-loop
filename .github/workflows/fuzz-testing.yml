name: D-Loop Fuzz Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'contracts/**/*.sol'
      - 'test/foundry/**/*.sol'
      - 'foundry.toml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'contracts/**/*.sol'
      - 'test/foundry/**/*.sol'
      - 'foundry.toml'
  # Allow manual triggering
  workflow_dispatch:

jobs:
  # Quick tests for PRs and initial validation
  quick-tests:
    name: Quick Fuzz Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache Foundry
        uses: actions/cache@v3
        with:
          path: |
            ~/.foundry
            ~/.cache/foundry
            out/
            cache/
          key: foundry-${{ runner.os }}-${{ hashFiles('foundry.toml') }}-${{ hashFiles('contracts/**/*.sol') }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: forge install

      - name: Run quick fuzz tests
        run: forge test --profile quick -vv

  # Full tests for main branches and after quick tests pass
  full-tests:
    name: Full Fuzz Test Suite
    needs: quick-tests
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [core, governance, token, adapters, fees, integration, invariants]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache Foundry
        uses: actions/cache@v3
        with:
          path: |
            ~/.foundry
            ~/.cache/foundry
            out/
            cache/
          key: foundry-${{ runner.os }}-${{ matrix.test-group }}-${{ hashFiles('foundry.toml') }}-${{ hashFiles('contracts/**/*.sol') }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: forge install

      - name: Run ${{ matrix.test-group }} fuzz tests
        run: |
          if [ "${{ matrix.test-group }}" == "invariants" ]; then
            forge test --match-path "test/foundry/invariants/*.sol" --profile ci -vvv
            forge test --match-path "test/foundry/core/*.invariant.t.sol" --profile ci -vvv
          else
            forge test --match-path "test/foundry/${{ matrix.test-group }}/*.sol" --profile ci -vvv
          fi

  # Security analysis after tests pass
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: quick-tests
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v3
        
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
          
      - name: Install Slither
        run: pip3 install slither-analyzer
        
      - name: Run Slither
        run: slither . --exclude-dependencies --exclude-informational --exclude-optimization
        continue-on-error: true
        
      - name: Run Mythril
        run: |
          docker pull mythril/myth
          find contracts -name "*.sol" -exec docker run -v $(pwd):/tmp mythril/myth analyze /tmp/{} --solc-json /tmp/solc-settings.json \;
        continue-on-error: true
        
      - name: Run Echidna (if available)
        run: |
          if command -v echidna-test &> /dev/null; then
            find test/foundry -name "*.echidna.sol" -exec echidna-test {} \;
          else
            echo "Echidna not available, skipping"
          fi
        continue-on-error: true

  # Coverage report generation
  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: full-tests
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          
      - name: Cache Foundry
        uses: actions/cache@v3
        with:
          path: |
            ~/.foundry
            ~/.cache/foundry
            out/
            cache/
          key: foundry-coverage-${{ runner.os }}-${{ hashFiles('foundry.toml') }}
          
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
          
      - name: Install dependencies
        run: forge install
        
      - name: Generate coverage report
        run: forge coverage --report lcov
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN || github.token }}
        with:
          files: ./lcov.info
          fail_ci_if_error: false
          
      - name: Archive coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            lcov.info
            coverage/

  # Gas report for optimization
  gas-report:
    name: Generate Gas Report
    runs-on: ubuntu-latest
    needs: quick-tests
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
          
      - name: Install dependencies
        run: forge install
        
      - name: Generate gas report
        run: forge test --gas-report --profile gas > gas-report.txt
        
      - name: Archive gas report
        uses: actions/upload-artifact@v3
        with:
          name: gas-report
          path: gas-report.txt
